/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * User Management API
 * API for user registration, authentication, password reset, and token management.
 * OpenAPI spec version: 1.0.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetUsers200,
  GetUsers404,
  GetUsers500,
  GetUsersVerifyUser200,
  GetUsersVerifyUser400,
  GetUsersVerifyUser500,
  GetUsersVerifyUserParams,
  PostUsersForgotPassword200,
  PostUsersForgotPassword400,
  PostUsersForgotPassword500,
  PostUsersForgotPasswordBody,
  PostUsersLogin200,
  PostUsersLogin400,
  PostUsersLogin500,
  PostUsersLoginBody,
  PostUsersRefreshToken200,
  PostUsersRefreshToken401,
  PostUsersRefreshToken500,
  PostUsersRefreshTokenBody,
  PostUsersRegister200,
  PostUsersRegister400,
  PostUsersRegister500,
  PostUsersRegisterBody,
  PostUsersResetPassword200,
  PostUsersResetPassword400,
  PostUsersResetPassword500,
  PostUsersResetPasswordBody,
  PutUsers200,
  PutUsers404,
  PutUsers500,
  PutUsersBody,
} from "../../model";

import { useMutation, useQuery } from "@tanstack/react-query";

import { restClient } from "../../../lib/httpClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Create a new user and send an email for verification.
 * @summary Register a new user
 */
export const postUsersRegister = (
  postUsersRegisterBody: PostUsersRegisterBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PostUsersRegister200>(
    {
      url: `/users/register/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postUsersRegisterBody,
    },
    options,
  );
};

export const getPostUsersRegisterMutationOptions = <
  TError = PostUsersRegister400 | PostUsersRegister500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRegister>>,
    TError,
    { data: PostUsersRegisterBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersRegister>>,
  TError,
  { data: PostUsersRegisterBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersRegister>>,
    { data: PostUsersRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersRegister>>
>;
export type PostUsersRegisterMutationBody = PostUsersRegisterBody;
export type PostUsersRegisterMutationError =
  | PostUsersRegister400
  | PostUsersRegister500;

/**
 * @summary Register a new user
 */
export const usePostUsersRegister = <
  TError = PostUsersRegister400 | PostUsersRegister500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRegister>>,
    TError,
    { data: PostUsersRegisterBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersRegister>>,
  TError,
  { data: PostUsersRegisterBody },
  TContext
> => {
  const mutationOptions = getPostUsersRegisterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Verify the user's email address using the token provided in the query parameters.
 * @summary Verify user email
 */
export const getUsersVerifyUser = (
  params: GetUsersVerifyUserParams,
  options?: SecondParameter<typeof restClient>,
  signal?: AbortSignal,
) => {
  return restClient<GetUsersVerifyUser200>(
    { url: `/users/verify-user/`, method: "GET", params, signal },
    options,
  );
};

export const getGetUsersVerifyUserQueryKey = (
  params: GetUsersVerifyUserParams,
) => {
  return [`/users/verify-user/`, ...(params ? [params] : [])] as const;
};

export const getGetUsersVerifyUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersVerifyUser>>,
  TError = GetUsersVerifyUser400 | GetUsersVerifyUser500,
>(
  params: GetUsersVerifyUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersVerifyUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof restClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersVerifyUserQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersVerifyUser>>
  > = ({ signal }) => getUsersVerifyUser(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersVerifyUser>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersVerifyUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersVerifyUser>>
>;
export type GetUsersVerifyUserQueryError =
  | GetUsersVerifyUser400
  | GetUsersVerifyUser500;

export function useGetUsersVerifyUser<
  TData = Awaited<ReturnType<typeof getUsersVerifyUser>>,
  TError = GetUsersVerifyUser400 | GetUsersVerifyUser500,
>(
  params: GetUsersVerifyUserParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersVerifyUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersVerifyUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof restClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersVerifyUser<
  TData = Awaited<ReturnType<typeof getUsersVerifyUser>>,
  TError = GetUsersVerifyUser400 | GetUsersVerifyUser500,
>(
  params: GetUsersVerifyUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersVerifyUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsersVerifyUser>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsersVerifyUser<
  TData = Awaited<ReturnType<typeof getUsersVerifyUser>>,
  TError = GetUsersVerifyUser400 | GetUsersVerifyUser500,
>(
  params: GetUsersVerifyUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersVerifyUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Verify user email
 */

export function useGetUsersVerifyUser<
  TData = Awaited<ReturnType<typeof getUsersVerifyUser>>,
  TError = GetUsersVerifyUser400 | GetUsersVerifyUser500,
>(
  params: GetUsersVerifyUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUsersVerifyUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersVerifyUserQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Authenticate a user and return access and refresh tokens.
 * @summary User login
 */
export const postUsersLogin = (
  postUsersLoginBody: PostUsersLoginBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PostUsersLogin200>(
    {
      url: `/users/login/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postUsersLoginBody,
    },
    options,
  );
};

export const getPostUsersLoginMutationOptions = <
  TError = PostUsersLogin400 | PostUsersLogin500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogin>>,
    TError,
    { data: PostUsersLoginBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersLogin>>,
  TError,
  { data: PostUsersLoginBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersLogin>>,
    { data: PostUsersLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersLogin>>
>;
export type PostUsersLoginMutationBody = PostUsersLoginBody;
export type PostUsersLoginMutationError = PostUsersLogin400 | PostUsersLogin500;

/**
 * @summary User login
 */
export const usePostUsersLogin = <
  TError = PostUsersLogin400 | PostUsersLogin500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersLogin>>,
    TError,
    { data: PostUsersLoginBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersLogin>>,
  TError,
  { data: PostUsersLoginBody },
  TContext
> => {
  const mutationOptions = getPostUsersLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Refresh the access and refresh tokens using the provided refresh token.
 * @summary Refresh JWT token
 */
export const postUsersRefreshToken = (
  postUsersRefreshTokenBody: PostUsersRefreshTokenBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PostUsersRefreshToken200>(
    {
      url: `/users/refresh-token/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postUsersRefreshTokenBody,
    },
    options,
  );
};

export const getPostUsersRefreshTokenMutationOptions = <
  TError = PostUsersRefreshToken401 | PostUsersRefreshToken500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    TError,
    { data: PostUsersRefreshTokenBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersRefreshToken>>,
  TError,
  { data: PostUsersRefreshTokenBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    { data: PostUsersRefreshTokenBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersRefreshToken(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersRefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersRefreshToken>>
>;
export type PostUsersRefreshTokenMutationBody = PostUsersRefreshTokenBody;
export type PostUsersRefreshTokenMutationError =
  | PostUsersRefreshToken401
  | PostUsersRefreshToken500;

/**
 * @summary Refresh JWT token
 */
export const usePostUsersRefreshToken = <
  TError = PostUsersRefreshToken401 | PostUsersRefreshToken500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersRefreshToken>>,
    TError,
    { data: PostUsersRefreshTokenBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersRefreshToken>>,
  TError,
  { data: PostUsersRefreshTokenBody },
  TContext
> => {
  const mutationOptions = getPostUsersRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Sends an email with a new randomly generated password.
 * @summary Send password reset email
 */
export const postUsersForgotPassword = (
  postUsersForgotPasswordBody: PostUsersForgotPasswordBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PostUsersForgotPassword200>(
    {
      url: `/users/forgot-password/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postUsersForgotPasswordBody,
    },
    options,
  );
};

export const getPostUsersForgotPasswordMutationOptions = <
  TError = PostUsersForgotPassword400 | PostUsersForgotPassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersForgotPassword>>,
    TError,
    { data: PostUsersForgotPasswordBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersForgotPassword>>,
  TError,
  { data: PostUsersForgotPasswordBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersForgotPassword>>,
    { data: PostUsersForgotPasswordBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersForgotPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersForgotPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersForgotPassword>>
>;
export type PostUsersForgotPasswordMutationBody = PostUsersForgotPasswordBody;
export type PostUsersForgotPasswordMutationError =
  | PostUsersForgotPassword400
  | PostUsersForgotPassword500;

/**
 * @summary Send password reset email
 */
export const usePostUsersForgotPassword = <
  TError = PostUsersForgotPassword400 | PostUsersForgotPassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersForgotPassword>>,
    TError,
    { data: PostUsersForgotPasswordBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersForgotPassword>>,
  TError,
  { data: PostUsersForgotPasswordBody },
  TContext
> => {
  const mutationOptions = getPostUsersForgotPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Allows a user to set a new password.
 * @summary Set a new password
 */
export const postUsersResetPassword = (
  postUsersResetPasswordBody: PostUsersResetPasswordBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PostUsersResetPassword200>(
    {
      url: `/users/reset-password/`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: postUsersResetPasswordBody,
    },
    options,
  );
};

export const getPostUsersResetPasswordMutationOptions = <
  TError = PostUsersResetPassword400 | PostUsersResetPassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersResetPassword>>,
    TError,
    { data: PostUsersResetPasswordBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postUsersResetPassword>>,
  TError,
  { data: PostUsersResetPasswordBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postUsersResetPassword>>,
    { data: PostUsersResetPasswordBody }
  > = (props) => {
    const { data } = props ?? {};

    return postUsersResetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsersResetPassword>>
>;
export type PostUsersResetPasswordMutationBody = PostUsersResetPasswordBody;
export type PostUsersResetPasswordMutationError =
  | PostUsersResetPassword400
  | PostUsersResetPassword500;

/**
 * @summary Set a new password
 */
export const usePostUsersResetPassword = <
  TError = PostUsersResetPassword400 | PostUsersResetPassword500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postUsersResetPassword>>,
    TError,
    { data: PostUsersResetPasswordBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postUsersResetPassword>>,
  TError,
  { data: PostUsersResetPasswordBody },
  TContext
> => {
  const mutationOptions = getPostUsersResetPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Allows a user to update its details - currently only Display Name.
 * @summary Update User details
 */
export const putUsers = (
  putUsersBody: PutUsersBody,
  options?: SecondParameter<typeof restClient>,
) => {
  return restClient<PutUsers200>(
    {
      url: `/users/`,
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      data: putUsersBody,
    },
    options,
  );
};

export const getPutUsersMutationOptions = <
  TError = PutUsers404 | PutUsers500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsers>>,
    TError,
    { data: PutUsersBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putUsers>>,
  TError,
  { data: PutUsersBody },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putUsers>>,
    { data: PutUsersBody }
  > = (props) => {
    const { data } = props ?? {};

    return putUsers(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof putUsers>>
>;
export type PutUsersMutationBody = PutUsersBody;
export type PutUsersMutationError = PutUsers404 | PutUsers500;

/**
 * @summary Update User details
 */
export const usePutUsers = <
  TError = PutUsers404 | PutUsers500,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putUsers>>,
    TError,
    { data: PutUsersBody },
    TContext
  >;
  request?: SecondParameter<typeof restClient>;
}): UseMutationResult<
  Awaited<ReturnType<typeof putUsers>>,
  TError,
  { data: PutUsersBody },
  TContext
> => {
  const mutationOptions = getPutUsersMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Allows a user to retrieve its account details.
 * @summary Get User Details
 */
export const getUsers = (
  options?: SecondParameter<typeof restClient>,
  signal?: AbortSignal,
) => {
  return restClient<GetUsers200>(
    { url: `/users/`, method: "GET", signal },
    options,
  );
};

export const getGetUsersQueryKey = () => {
  return [`/users/`] as const;
};

export const getGetUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = GetUsers404 | GetUsers500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({
    signal,
  }) => getUsers(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = GetUsers404 | GetUsers500;

export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = GetUsers404 | GetUsers500,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof restClient>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = GetUsers404 | GetUsers500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getUsers>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = GetUsers404 | GetUsers500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get User Details
 */

export function useGetUsers<
  TData = Awaited<ReturnType<typeof getUsers>>,
  TError = GetUsers404 | GetUsers500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
