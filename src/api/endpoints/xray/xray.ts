/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * User Management API
 * API for user registration, authentication, password reset, and token management.
 * OpenAPI spec version: 1.0.0
 */
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  GetXrayLab200,
  GetXrayLab404,
  GetXrayLab500,
  GetXrayLabParams,
  GetXrayModules200,
  GetXrayModules404,
  GetXrayModules500,
} from "../../model";

import { useQuery } from "@tanstack/react-query";

import { restClient } from "../../../lib/httpClient";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Allows user to fetch all the xray lab files.
 * @summary Get Xray Lab files
 */
export const getXrayLab = (
  params?: GetXrayLabParams,
  options?: SecondParameter<typeof restClient>,
  signal?: AbortSignal,
) => {
  return restClient<GetXrayLab200>(
    { url: `/xray/lab/`, method: "GET", params, signal },
    options,
  );
};

export const getGetXrayLabQueryKey = (params?: GetXrayLabParams) => {
  return [`/xray/lab/`, ...(params ? [params] : [])] as const;
};

export const getGetXrayLabQueryOptions = <
  TData = Awaited<ReturnType<typeof getXrayLab>>,
  TError = GetXrayLab404 | GetXrayLab500,
>(
  params?: GetXrayLabParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getXrayLab>>, TError, TData>
    >;
    request?: SecondParameter<typeof restClient>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetXrayLabQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getXrayLab>>> = ({
    signal,
  }) => getXrayLab(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getXrayLab>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetXrayLabQueryResult = NonNullable<
  Awaited<ReturnType<typeof getXrayLab>>
>;
export type GetXrayLabQueryError = GetXrayLab404 | GetXrayLab500;

export function useGetXrayLab<
  TData = Awaited<ReturnType<typeof getXrayLab>>,
  TError = GetXrayLab404 | GetXrayLab500,
>(
  params: undefined | GetXrayLabParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getXrayLab>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXrayLab>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof restClient>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetXrayLab<
  TData = Awaited<ReturnType<typeof getXrayLab>>,
  TError = GetXrayLab404 | GetXrayLab500,
>(
  params?: GetXrayLabParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getXrayLab>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getXrayLab>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetXrayLab<
  TData = Awaited<ReturnType<typeof getXrayLab>>,
  TError = GetXrayLab404 | GetXrayLab500,
>(
  params?: GetXrayLabParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getXrayLab>>, TError, TData>
    >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Xray Lab files
 */

export function useGetXrayLab<
  TData = Awaited<ReturnType<typeof getXrayLab>>,
  TError = GetXrayLab404 | GetXrayLab500,
>(
  params?: GetXrayLabParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getXrayLab>>, TError, TData>
    >;
    request?: SecondParameter<typeof restClient>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetXrayLabQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Allows user to fetch all the xray lab modules.
 * @summary Get Xray Lab modules list
 */
export const getXrayModules = (
  options?: SecondParameter<typeof restClient>,
  signal?: AbortSignal,
) => {
  return restClient<GetXrayModules200>(
    { url: `/xray/modules/`, method: "GET", signal },
    options,
  );
};

export const getGetXrayModulesQueryKey = () => {
  return [`/xray/modules/`] as const;
};

export const getGetXrayModulesQueryOptions = <
  TData = Awaited<ReturnType<typeof getXrayModules>>,
  TError = GetXrayModules404 | GetXrayModules500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getXrayModules>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetXrayModulesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getXrayModules>>> = ({
    signal,
  }) => getXrayModules(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getXrayModules>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetXrayModulesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getXrayModules>>
>;
export type GetXrayModulesQueryError = GetXrayModules404 | GetXrayModules500;

export function useGetXrayModules<
  TData = Awaited<ReturnType<typeof getXrayModules>>,
  TError = GetXrayModules404 | GetXrayModules500,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getXrayModules>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getXrayModules>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof restClient>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetXrayModules<
  TData = Awaited<ReturnType<typeof getXrayModules>>,
  TError = GetXrayModules404 | GetXrayModules500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getXrayModules>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getXrayModules>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetXrayModules<
  TData = Awaited<ReturnType<typeof getXrayModules>>,
  TError = GetXrayModules404 | GetXrayModules500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getXrayModules>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Xray Lab modules list
 */

export function useGetXrayModules<
  TData = Awaited<ReturnType<typeof getXrayModules>>,
  TError = GetXrayModules404 | GetXrayModules500,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getXrayModules>>, TError, TData>
  >;
  request?: SecondParameter<typeof restClient>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetXrayModulesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
